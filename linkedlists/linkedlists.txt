Types - singly linked, doubly linked and circular linked

Singly Linked - Each element contains a piece of data and the element following it

// The simplest singly linked list element typedef struct ListElement {
struct ListElement *next; } ListElement;

// A more useful singly linked list element typedef struct IntElement {
struct IntElement *next;
int data; } IntElement;

// A singly linked list in C++ 
class IntElement {
public:
IntElement( int value ): next( NULL ), data( value ) {}
~tElement() {}
IntElement *getNext() const { return next; }
int value() const { return data; }
void setNext( IntElement *elem ) { next = elem; } void setValue( int value ) { data = value; }
private:
IntElement *next; int data;
};


// A templated C++ singly linked list template <class T>
class ListElement {
public:
ListElement( const T &value ): next( NULL ), data( value ) {} ~ListElement() {}
ListElement *getNext() const { return next; } const T& value() const { return data; }
void setNext( ListElement *elem ) { next = elem; } void setValue( const T &value ) { data = value; }
private:
ListElement *next; T data;
};

Doubly Linked List - 
Each element contains a link to the previous element and the next element.  

Circular Linked List - 
Both single and double varieties.  each element has a non-null next (and previous for doubly linked).  Have to track start.  List with single item points to itself.  